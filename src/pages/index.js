import Head from "next/head";
import axios from "axios";
import { useEffect, useState } from "react";
import {
  Container,
  Stack,
  Heading,
  Button,
  SimpleGrid,
  Flex,
  Box,
  useDisclosure,
  Spinner,
} from "@chakra-ui/react";
import Header from "@/components/Header";
import PokemonCard from "@/components/PokemonCard";
import ModalPokemonDetails from "@/components/ModalPokemonDetails";
import { apiUrl } from "@/utils/constants";


export default function Home() {
  const pokemonDataModal = useDisclosure();
  const [isLoading, setIsLoading] = useState(false);
  const [pokemon, setPokemon] = useState([]);
  const [selectedPokemon, setSelectedPokemon] = useState();
  const [catchedPokemons, setCatchedPokemons] = useState([]);
  const [currentPage, setCurrentPage] = useState(
    "https://pokeapi.co/api/v2/pokemon/?limit=20&offset=0"
  );
  //const localh = 'http://localhost:4000/api/catched'

  useEffect(() => {
    setIsLoading(true);
    axios.get(currentPage).then(async ({ data }) => {
      const promises = data.results.map((result) => axios(result.url));
      const fetchedPokemon = (await Promise.all(promises)).map(
        (res) => res.data
      );
      setPokemon((prev) => [...prev, ...fetchedPokemon]);
      setIsLoading(false);
    });
  }, [currentPage]);

  useEffect(() => {
    axios.get(apiUrl)
      .then(response => {
        const data = response.data;
        console.log('data', data);
        setCatchedPokemons(data);
      })
      .catch(error => {
        console.error("Error al obtener los pokemones capturados!", error);
      });
  }, []);

  const handleNextPage = () => {
    setIsLoading(true);
    axios
      .get(currentPage)
      .then(async ({ data }) => {
        const nextPage = data.next;
        const offsetIndex = nextPage.lastIndexOf("offset=") + 7;
        const offset = nextPage.substring(offsetIndex);
        setCurrentPage(
          `https://pokeapi.co/api/v2/pokemon/?limit=20&offset=${offset}`
        );
        setIsLoading(false);
      })
      .catch((error) => {
        console.error("Error al cargar la siguiente página:", error);
        setIsLoading(false);
      });
  };

  const handleViewPokemon = (pokemon) => {
    setSelectedPokemon(pokemon);
    pokemonDataModal.onOpen();
  };

  const updateCatchedPokemons = async () => {
    try {
      const response = await axios.get(apiUrl);
      const data = response.data;
      setCatchedPokemons(data);
    } catch (error) {
      console.error("Error al obtener los pokemones capturados", error);
    }
  };

  useEffect(() => {
    updateCatchedPokemons();
  }, []);

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/pokebola.ico" />
      </Head>
      <Header />
      <Flex
        alignItems="center"
        minH="100vh"
        justifyContent="center"
        bg="gray.200"
        mt="4em"
      >
        <Container
          maxW="container.lg"
          py="10"
          textAlign="center"
          fontFamily="Roboto"
        >
          <Heading as="h1" mb="5">
            Buscar Pokemon
          </Heading>
          {isLoading ? (
            <Spinner size="xl" color="blue.800" />
          ) : (
            <Stack p={{ base: 5, md: 10 }} alignItems="center" spacing="5">
              <SimpleGrid
                spacing={{ base: 5, md: 10 }}
                columns={{ base: 1, sm: 2, md: 3, lg: 4, xl: 5 }}
                w="full"
              >
                {pokemon.map((pokemon) => (
                  <Box
                    as="button"
                    key={pokemon.id}
                    onClick={() => handleViewPokemon(pokemon)}
                    maxW={{ base: "full", md: "xs" }}
                  >
                    <PokemonCard pokemon={pokemon} type />
                  </Box>
                ))}
              </SimpleGrid>

              <Button
                mt={{ base: 5, md: 10 }}
                isLoading={isLoading}
                onClick={handleNextPage}
                colorScheme="teal"
                variant="solid"
                size="md"
                _hover={{ bg: "teal.600" }}
                _active={{ bg: "teal.700" }}
              >
                Cargar más
              </Button>
            </Stack>
          )}
        </Container>
      </Flex>

      <ModalPokemonDetails
        pokemonDataModal={pokemonDataModal}
        selectedPokemon={selectedPokemon}
        pokemon={selectedPokemon}
        catchedPokemons={catchedPokemons}
        setCatchedPokemons={setCatchedPokemons}
        updateCatchedPokemons={updateCatchedPokemons}
      />
    </>
  );
}
